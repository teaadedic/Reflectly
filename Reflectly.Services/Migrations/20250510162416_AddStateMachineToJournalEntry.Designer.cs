// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reflectly.Services.Database;

#nullable disable

namespace Reflectly.Services.Migrations
{
    [DbContext(typeof(ReflectlyContext))]
    [Migration("20250510162416_AddStateMachineToJournalEntry")]
    partial class AddStateMachineToJournalEntry
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("JournalMoodLabel", b =>
                {
                    b.Property<Guid>("JournalEntryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("journal_entry_id");

                    b.Property<Guid>("MoodLabelId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("mood_label_id");

                    b.HasKey("JournalEntryId", "MoodLabelId")
                        .HasName("PK__JournalM__F743375AB6E66A98");

                    b.HasIndex("MoodLabelId");

                    b.ToTable("JournalMoodLabel", (string)null);
                });

            modelBuilder.Entity("Reflectly.Services.Database.BreathingExerciseSession", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("session_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("int")
                        .HasColumnName("duration_seconds");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId")
                        .HasName("PK__Breathin__69B13FDCC2276B1F");

                    b.HasIndex("UserId");

                    b.ToTable("BreathingExerciseSession", (string)null);
                });

            modelBuilder.Entity("Reflectly.Services.Database.JournalEntry", b =>
                {
                    b.Property<Guid>("JournalEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("journal_entry_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("LinkedMoodEntryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("linked_mood_entry_id");

                    b.Property<string>("PromptText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("prompt_text");

                    b.Property<string>("ResponseText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("response_text");

                    b.Property<string>("StateMachine")
                        .HasColumnType("text")
                        .HasColumnName("state_machine_status");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("JournalEntryId");

                    b.HasIndex("LinkedMoodEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("JournalEntry", (string)null);
                });

            modelBuilder.Entity("Reflectly.Services.Database.MoodEntry", b =>
                {
                    b.Property<Guid>("MoodEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("mood_entry_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("MoodEmoji")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("mood_emoji");

                    b.Property<string>("MoodText")
                        .HasColumnType("text")
                        .HasColumnName("mood_text");

                    b.Property<DateTime?>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("timestamp")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("MoodEntryId");

                    b.HasIndex("UserId");

                    b.ToTable("MoodEntry", (string)null);
                });

            modelBuilder.Entity("Reflectly.Services.Database.MoodLabel", b =>
                {
                    b.Property<Guid>("MoodLabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("mood_label_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("label_name");

                    b.HasKey("MoodLabelId");

                    b.ToTable("MoodLabel", (string)null);
                });

            modelBuilder.Entity("Reflectly.Services.Database.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_salt");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Email" }, "UQ__Users__AB6E6164584F9F83")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("JournalMoodLabel", b =>
                {
                    b.HasOne("Reflectly.Services.Database.JournalEntry", null)
                        .WithMany()
                        .HasForeignKey("JournalEntryId")
                        .IsRequired()
                        .HasConstraintName("FK__JournalMo__journ__4AB81AF0");

                    b.HasOne("Reflectly.Services.Database.MoodLabel", null)
                        .WithMany()
                        .HasForeignKey("MoodLabelId")
                        .IsRequired()
                        .HasConstraintName("FK__JournalMo__mood___4BAC3F29");
                });

            modelBuilder.Entity("Reflectly.Services.Database.BreathingExerciseSession", b =>
                {
                    b.HasOne("Reflectly.Services.Database.User", "User")
                        .WithMany("BreathingExerciseSessions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Breathing__user___5070F446");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reflectly.Services.Database.JournalEntry", b =>
                {
                    b.HasOne("Reflectly.Services.Database.MoodEntry", "LinkedMoodEntry")
                        .WithMany("JournalEntries")
                        .HasForeignKey("LinkedMoodEntryId")
                        .HasConstraintName("FK__JournalEn__linke__44FF419A");

                    b.HasOne("Reflectly.Services.Database.User", "User")
                        .WithMany("JournalEntries")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__JournalEn__user___440B1D61");

                    b.Navigation("LinkedMoodEntry");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reflectly.Services.Database.MoodEntry", b =>
                {
                    b.HasOne("Reflectly.Services.Database.User", "User")
                        .WithMany("MoodEntries")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__MoodEntry__user___3F466844");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Reflectly.Services.Database.MoodEntry", b =>
                {
                    b.Navigation("JournalEntries");
                });

            modelBuilder.Entity("Reflectly.Services.Database.User", b =>
                {
                    b.Navigation("BreathingExerciseSessions");

                    b.Navigation("JournalEntries");

                    b.Navigation("MoodEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
